defaultTasks 'clean', 'build'

apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = 'me.guoyao'
version = '1.0.0-SNAPSHOT'
description = 'This a project for learning spring mvc framework.'

ext {
    springVersion = '3.2.3.RELEASE'
    classesDir = new File('build/classes')
}

repositories {
    mavenLocal()
    maven {
        url 'http://repository.guoyao.me/content/groups/all-in-one'
    }
    mavenCentral()
}

dependencies {
    assert delegate == project.dependencies
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    testCompile 'junit:junit:4.11'
    testCompile "org.springframework:spring-test:$springVersion"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url:  'http://repository.guoyao.me/content/repositories/snapshots') {
                authentication(userName: 'deployment', password: nexusDeploymentPassword)
            }
        }
    }
}

sourceSets.all {
    ext.purpose = null
}

sourceSets {
    main {
        purpose = "production"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }
}

task printProperties << {
    configurations.runtime.each { File f -> println f }
    println springVersion
    sourceSets.matching { it.purpose ==  'production'}.each { println it.name }
    if(hasProperty('commandLineProjectProp'))
    {
        println commandLineProjectProp
    }
    println gradlePropertiesProp
    println systemProjectProp
    println envProjectProp
    println System.properties['system']
    println tasks.resources.name
}

task resources << {
    classesDir.mkdirs()
}

task compile(dependsOn: 'resources') << {
    if(classesDir.isDirectory()) {
        println 'The class directory exists. I can operate.'
    }
}

//println tasks.getByPath('compile').path
//println tasks.getByPath(':compile').path
//println tasks.getByName('compile').path

task taskX(dependsOn: ':sub-project:taskY') << {
    println 'taskX'
}

taskX.dependsOn {
    tasks.findAll { task -> task.name.startsWith('lib') }
//    tasks.findAll { it.name.startsWith('lib') }
}

task lib1 << {
    println 'lib1'
}

task lib2 << {
    println 'lib2'
}

lib1.mustRunAfter lib2

task lib2(overwrite: true) << {
    println "lib2 overwrite"
}

lib2.onlyIf { !project.hasProperty('skipLib2') }

lib1.doFirst {
    throw new StopExecutionException()
}

lib2.enabled = false

task hello {
    ext {
        inputString = 'input'
        outputString = 'output'
    }
    inputs.file inputString
    outputs.file outputString
    doLast {
        println "$inputString - $outputString"
    }
}

tasks.addRule("Pattern: ping<ID>") { String taskName ->
    if (taskName.startsWith("ping")) {
        task(taskName) << {
            println "Pinging: " + (taskName - 'ping')
        }
    }
}

task groupPing {
    dependsOn pingServer1, pingServer2
}

task collection << {
    FileCollection collection = files('src/file1.txt', new File('src/file2.txt'), ['src/file3.txt', 'src/file4.txt'])

    collection.each { File file ->
        println file.absolutePath
    }

    // Convert the collection to various types
    Set set = collection.files
    Set set2 = collection as Set
    List list = collection as List
    String path = collection.asPath
    //File file = collection.singleFile
    //File file2 = collection as File

    // Add and subtract collections
    collection += files('src/file5.txt')

    collection.each { File file ->
        println file.absolutePath
    }

    collection -= files('src/file3.txt')

    collection.each { File file ->
        println file.absolutePath
    }
}


task list << {
    File srcDir

    // Create a file collection using a closure
    collection = files { srcDir.listFiles() }

    srcDir = file('src')
    collection.each { println it.absolutePath }
    println "Contents of $srcDir.name"
    collection.collect { relativePath(it) }.sort().each { println it }

    srcDir = file('src2')
    collection.each { println it.absolutePath }
    println "Contents of $srcDir.name"
    collection.collect { relativePath(it) }.sort().each { println it }
}

task fileTree << {
    // Create a file tree with a base directory
    FileTree tree = fileTree(dir: 'src/main')

    // Add include and exclude patterns to the tree
    tree.include '**/*.java'
    tree.exclude '**/Abstract*'

    // Create a tree using path
    tree = fileTree('src').include('**/*.java')

    // Create a tree using closure
    tree = fileTree('src') {
        include '**/*.java'
    }

    // Create a tree using a map
    tree = fileTree(dir: 'src', include: '**/*.java')
    tree = fileTree(dir: 'src', includes: ['**/*.java', '**/*.xml'])
    tree = fileTree(dir: 'src', include: '**/*.java', exclude: '**/*test*/**')

    // Iterate over the contents of a tree
    tree.each { File file ->
        println file
    }

    // Filter a tree
    FileTree filtered = tree.matching {
        include 'org/gradle/api/**'
    }

    // Add trees together
    FileTree sum = tree + fileTree(dir: 'src/test')

    // Visit the elements of the tree
    tree.visit { element ->
        println "$element.relativePath => $element.file"
    }
}

// Use a File object to specify the source directory
compile {
    ext.source = file('src/main/java')
}

// Use a String path to specify the source directory
compile {
    ext.source = 'src/main/java'
}

// Use a collection to specify multiple source directories
compile {
    ext.source = ['src/main/java', '../shared/java']
}

// Use a FileCollection (or FileTree in this case) to specify the source files
compile {
    ext.source = fileTree(dir: 'src/main/java').matching { include 'org/gradle/api/**' }
}

// Using a closure to specify the source files.
compile {
    ext.source = {
        // Use the contents of each zip file in the src dir
        file('src').listFiles().findAll { it.name.endsWith('.zip') }.collect { zipTree(it) }
    }
}

compile {
    // Add some source directories use String paths
    source files('src/main/java', 'src/main/groovy')

    // Add a source directory using a File object
    source file('../shared/java')

    // Add some source directories using a closure
    source { file('src/test/').listFiles() }
}

task copyTask(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
}
